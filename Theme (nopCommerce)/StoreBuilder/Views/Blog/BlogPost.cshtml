@model BlogPostModel
@using Nop.Web.Models.Blogs;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
}
<section id="blog-page">
    <div class="container">
        <div class="row">
            <div class="col-md-8 col-sm-7">
                <div class="blog-image wow fadeInUp" data-wow-delay="0.6s">
                    @if (!string.IsNullOrEmpty(Model.PictureModel.ImageUrl))
                    {
                        <img class="img-responsive" src="@Model.PictureModel.ImageUrl" alt="@Model.PictureModel.AlternateText" data-wow-delay="0.4s">
                    }
                </div>
                <div class="blog-content wow fadeInUp" data-wow-delay="1s">
                    <h2 class="blog-item-title">@Model.Title</h2>
                    <span class="meta-date"><i class="fa fa-calendar"></i>@Model.CreatedOn.ToString("D")</span>
                    @if (Model.AllowComments)
                    {
                        <span class="meta-comments"><i class="fa fa-comments"></i>@Model.NumberOfComments</span>
                    }
                    @if (Model.Tags.Count > 0)
                    {
                        <div class="meta-tags">
                            <ul class="list-unstyled">
                                @for (int i = 0; i < Model.Tags.Count; i++)
                                {
                                    var tag = Model.Tags[i];
                                    <li><a href="@Url.RouteUrl("BlogByTag", new { Tag = tag })">@tag</a></li>
                                }
                            </ul>
                        </div>
                    }
                    @Html.Widget("blogpost_page_before_body", Model.Id)
                    @Html.Raw(Model.Body)
                </div>
                @Html.Widget("blogpost_page_before_comments", Model.Id)
                @if (Model.AllowComments)
                {
                    if (Model.Comments.Count > 0)
                    {
                        <div class="blog-comment wow fadeInUp" data-wow-delay="0.6s">
                            <h2>@T("Blog.Comments")</h2>
                            @foreach (var comment in Model.Comments)
                            {
                                <div class="media">
                                    <div class="media-object pull-left">
                                        @if (!string.IsNullOrEmpty(comment.CustomerAvatarUrl))
                                        {
                                            <div class="avatar">
                                                @if (comment.AllowViewingProfiles)
                                                {
                                                    <a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})">
                                                        <img src="@(comment.CustomerAvatarUrl)" class="img-responsive" alt="avatar"/>
                                                    </a>
                                                }
                                                else
                                                {
                                                    <img src="@(comment.CustomerAvatarUrl)" class="img-responsive" alt="avatar"/>
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="media-body">
                                        <h4 class="media-heading">
                                            @if (comment.AllowViewingProfiles)
                                            {
                                                <a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})">@(comment.CustomerName)</a>
                                            }
                                            else
                                            {
                                                <span>@(comment.CustomerName)</span>
                                            }
                                        </h4>
                                        <h5>@comment.CreatedOn.ToString("g")</h5>
                                        <p>@Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))</p>
                                    </div>
                                    @Html.Widget("blogpost_page_inside_comment", comment.Id)
                                </div>
                            }
                        </div>
                    }
                    <div class="blog-comment-form wow fadeInUp" data-wow-delay="0.8s">
                        <h3>@T("Blog.Comments.LeaveYourComment")</h3>
                        @{
                            var validationSummary = Html.ValidationSummary(true);
                        }
                        @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                        {
                            @validationSummary
                        }
                        @{
                            var result = TempData["nop.blog.addcomment.result"] as string;
                        }
                        @if (!string.IsNullOrEmpty(result))
                        {
                            @result
                        }
                        @using (Html.BeginForm())
                        {
                            <div class="col-md-12 col-sm-12">
                                @Html.TextAreaFor(model => model.AddNewComment.CommentText, new {@class = "form-control", rows = "7", placeholder = T("Admin.Common.Message")})
                                @Html.ValidationMessageFor(model => model.AddNewComment.CommentText)
                            </div>
                            if (Model.AddNewComment.DisplayCaptcha)
                            {
                                <div class="clearfix"></div>
                                <div class="col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2">
                                    @Html.Raw(Html.GenerateCaptcha())
                                </div>
                            }
                            <div class="col-md-3 col-sm-6">
                                <input type="submit" name="add-comment" class="form-control" value="@T("Theme.StoreBuilder.News.Comments.PostComment")"/>
                            </div>
                        }
                    </div>
                }
                @Html.Widget("blogpost_page_after_comments", Model.Id)
            </div>
            <div class="col-md-4 col-sm-5 wow fadeInUp" data-wow-delay="1.3s">
                @Html.Widget("blogpost_page_before_latest_blogposts")
                @Html.Action("LatestBlogPostSectionPage", "Blog")
                @Html.Action("BlogMonths", "Blog")
                @Html.Action("BlogTags", "Blog")
            </div>
        </div>
    </div>
</section>